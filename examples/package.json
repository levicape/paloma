{
  "name": "@levicape/paloma-examples",
  "config": {
    "packagemanager": "pnpm",
    "packageexecutor": "pnpm exec",
    "lintpaths": "./src",
    "outpaths": "./module"
  },
  "dependencies": {
    "@bufbuild/protobuf": "catalog:protobuf",
    "@levicape/paloma": "workspace:",
    "ksuid": "catalog:id",
    "ts-proto": "catalog:protobuf"
  },
  "devDependencies": {
    "@biomejs/biome": "catalog:lint",
    "@types/node": "catalog:types",
    "publint": "catalog:package",
    "syncpack": "catalog:package",
    "typescript": "catalog:dev"
  },
  "nx": {
    "targets": {
      "dx:precommit": {
        "dependsOn": [
          "dx:prepublish",
          "nx:test"
        ]
      },
      "dx:prepublish": {
        "dependsOn": [
          "clean:tsc"
        ]
      },
      "dx:test": {
        "dependsOn": [
          "dx:lint",
          "nx:test"
        ]
      },
      "nx:compile": {
        "dependsOn": [
          "build"
        ]
      },
      "nx:test": {
        "dependsOn": [
          "handler"
        ]
      },
      "build": {
        "dependsOn": [
          "@levicape/paloma:build"
        ]
      },
      "handler": {
        "dependsOn": [
          "nx:compile"
        ]
      }
    }
  },
  "private": true,
  "publishConfig": {
    "registry": "https://npm.pkg.github.com/"
  },
  "repository": "github:levicape/paloma",
  "scripts": {
    "build": "$npm_package_config_packageexecutor tsc",
    "clean": "rm -rf $npm_package_config_outpaths || true",
    "clean:tsc": "rm -rf ./.tsc",
    "commit": "$npm_package_config_packageexecutor nx dx:precommit --no-cloud --verbose",
    "compile": "$npm_package_config_packageexecutor nx nx:compile",
    "dx:config:post": "$npm_package_config_packagemanager config set recursive-install true",
    "dx:config:pre": "$npm_package_config_packagemanager config set recursive-install false",
    "dx:lint": "$npm_package_config_packageexecutor nx nx:compile && $npm_package_config_packageexecutor nx lint:format && $npm_package_config_packageexecutor nx package:format",
    "dx:precommit": "$npm_package_config_packageexecutor nx dx:precommit:pre && $npm_package_config_packageexecutor nx package:deps",
    "dx:precommit:pre": "echo \"Starting precommit dx. This will check package.json dependencies.\"",
    "dx:prepublish": "$npm_package_config_packageexecutor nx dx:prepublish:pre && $npm_package_config_packageexecutor nx dx:lint && $npm_package_config_packageexecutor nx prepublish",
    "dx:prepublish:pre": "echo \"Starting prepublish dx. This will compile the package, lint it, format package.json and verify all exports are valid. \"",
    "dx:start": "$npm_package_config_packageexecutor nx dx:start:pre && $npm_package_config_packageexecutor nx dx:lint && $npm_package_config_packageexecutor nx handler",
    "dx:start:pre": "echo \"Starting dx:start. This will dx:lint the package and start the harness.\"",
    "handler": "node --experimental-strip-types $npm_package_config_outpaths/basic/harness.canary.mjs",
    "lint": "$npm_package_config_packageexecutor nx exec -- biome check $npm_package_config_lintpaths",
    "lint:format": "$npm_package_config_packageexecutor nx exec -- biome check --write $npm_package_config_lintpaths",
    "lint:unsafe": "$npm_package_config_packageexecutor nx exec -- biome check --write --unsafe $npm_package_config_lintpaths",
    "package:deps": "$npm_package_config_packageexecutor nx exec -- depcheck",
    "package:fix": "$npm_package_config_packageexecutor nx exec -- syncpack fix-mismatches",
    "package:format": "$npm_package_config_packageexecutor nx exec -- syncpack format",
    "package:update": "$npm_package_config_packageexecutor nx exec -- syncpack update",
    "prebuild": "$npm_package_config_packageexecutor nx clean",
    "precommit": "$npm_package_config_packageexecutor nx dx:prepublish --no-cloud --verbose",
    "prelint": "$npm_package_config_packageexecutor nx exec -- biome format $npm_package_config_lintpaths",
    "prepublish": "$npm_package_config_packageexecutor publint --strict",
    "test": "$npm_package_config_packageexecutor nx nx:test --no-cloud --verbose",
    "test:canary": "node --experimental-strip-types module/basic/harness.canary.mjs",
    "test:module": "echo 'node --test  \"module/**/*.test.js\"'"
  },
  "type": "module"
}
