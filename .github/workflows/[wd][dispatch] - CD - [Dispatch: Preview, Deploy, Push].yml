########################################
# THIS FILE WAS AUTOMATICALLY GENERATED, DO NOT MODIFY
########################################
name: "Dispatch: Preview, Deploy, Push"
on:
  workflow_dispatch:
    {}
env:
  NPM_REGISTRY_PROTOCOL_LEVICAPE: https
  NPM_REGISTRY_HOST_LEVICAPE: npm.pkg.github.com
  NPM_TOKEN_LEVICAPE: ${{ secrets.LEVICAPE_NPM_TOKEN }}
  NPM_DEFAULT: ${{ vars.NPM_MIRROR }}
  LEVICAPE_REGISTRY_HOST: npm.pkg.github.com/
  LEVICAPE_REGISTRY: https://npm.pkg.github.com
  LEVICAPE_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  NODE_NO_WARNINGS: "1"
  NPM_CONFIG_UPDATE_NOTIFIER: "false"
  FRONTEND_HOSTNAME: at.levicape.cloud
  PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}
  APPLICATION_IMAGE_NAME: paloma
  CI_ENVIRONMENT: "{{{ vars.CI_ENVIRONMENT }}}"
  AWS_PAGER: ""
  AWS_REGION: us-west-2
  AWS_PROFILE: "{{{ vars.CI_ENVIRONMENT }}}"
  PULUMI_STACK_FILTER: ${{ vars.STACK_FILTER }}
  DOCKER_NO_IMAGE: ${{ vars.NO_IMAGE }}
jobs:
  deploy:
    name: Deploy Pulumi Stacks
    runs-on: act-darwin-a64-atoko
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
      - name: Setup Node 22.13.0
        uses: actions/setup-node@v4
        with:
          node-version: 22.13.0
          registry-url: ${{ env.NPM_REGISTRY_PROTOCOL_LEVICAPE }}://${{ env.NPM_REGISTRY_HOST_LEVICAPE }}
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml
          scope: "@levicape"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - id: cache-npm
        name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-npm-node-modules-${{ hashFiles('**/pnpm-lock.json') }}
          restore-keys: ${{ runner.os }}-build-npm-node-modules-
      - name: Get pnpm store directory
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV;
      - id: cache-pnpm-store
        name: Cache pnpm files
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.json') }}
          restore-keys: ${{ runner.os }}-pnpm-store-
      - name: Set NPM Registry to Verdaccio:31313 or NPM_MIRROR
        run: pnpm set registry ${NPM_DEFAULT:-http://localhost:31313};
      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List Dependencies
        continue-on-error: true
        run: pnpm list;
      - name: Install Dependencies
        run: pnpm install;
      - name: Build image
        run: |-
          if [ -z "$DOCKER_NO_IMAGE" ]; then 
          													pnpm exec nx pack:build iac-images-application --verbose; 
          												fi;
      - name: Verify AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
      - name: Setup Pulumi state backend
        run: |-
          echo "Retriving AWS credentials with pnpm exec fourtwo aws in $AWS_REGION";
          pnpm exec fourtwo;
          STRUCTURED_LOGGING=quiet pnpm exec fourtwo aws pulumi ci --region $AWS_REGION > .pulumi-ci;
      - name: Display Pulumi CI output
        run: cat .pulumi-ci;
      - name: Extract exports from Pulumi CI
        run: cat .pulumi-ci | grep "export" > .export-cd;
      - name: Load environment variables
        run: cat .export-cd;
      - name: Create Pulumi Helper Functions
        run: |-
          cat > .pulumi-helper.sh << 'EOF'
          configure_stack() {
            local step="$1"
            local stack_name="$2"
            local stack_cwd="$3"
            local project="$4"
            local output="$5"

            echo "${step}: Stack: ${stack_name}. CWD: ${stack_cwd}. Output: ${output}."
            echo "name: ${project}" >> "${stack_cwd}/Pulumi.yaml"
            cat "${stack_cwd}"/Pulumi.{yaml,"*".yaml} || true
          }

          setup_stack() {
            local stack_name="$1"
            local stack_cwd="$2"
            
            echo "Setting up stack: ${stack_name}. CWD: ${stack_cwd}."
            for cmd in init select; do
              pulumi stack ${cmd} ${stack_name} -C ${stack_cwd} || true
            done
          }

          configure_stack_settings() {
            local stack_cwd="$1"
            local configs="$2"
            
            echo "Configuring stack settings"
            
            while IFS= read -r line; do
              if [[ -n "$line" ]]; then
                key="${line%%=*}"
                value="${line#*=}"
                
                # Expand variables in value
                eval "value="$value""
                
                if [[ -n "$key" && -n "$value" ]]; then
                  echo "Setting $key to $value"
                  pulumi config set --path "$key" "$value" -C "$stack_cwd"
                fi
              fi
            done <<< "$configs"
          }

          refresh_and_preview() {
            local message="$1"
            local stack_cwd="$2"
            shift 2
            local default_args="$@"

            pulumi refresh --yes --skip-preview --clear-pending-creates --message "${message}-refresh" -C "${stack_cwd}" ${default_args}
            pulumi preview --show-replacement-steps --message "${message}-preview" -C "${stack_cwd}" ${default_args} || true
          }

          deploy_stack() {
            local message="$1"
            local stack_cwd="$2"
            shift 2
            local default_args="$@"

            pulumi up --yes --message "${message}-up" -C "${stack_cwd}" ${default_args}
          }

          remove_stack() {
          	local message="$1"
          	local stack_cwd="$2"
          	shift 2
          	local default_args="$@"
            
          	pulumi down --yes --message "${message}-down" -C "${stack_cwd}" ${default_args}
            }
            
          capture_outputs() {
            local stack_cwd="$1"
            local output="$2"

            pulumi stack output -C "${stack_cwd}" --json > "$(pwd)/${output}.json"
            cat "${output}.json"
            pulumi stack output -C "${stack_cwd}" --shell > "$(pwd)/${output}.sh"
            cat "${output}.sh"
            ls _pulumi
            chmod +x "$(pwd)/${output}.sh"
            echo "Output captured in ${output}.sh"
          }
          EOF
          chmod +x .pulumi-helper.sh
          source .pulumi-helper.sh;
      - name: Deploy paloma stacks
        run: |-
          mkdir -p _pulumi;
          source .export-cd;
          echo '@levicape/fourtwo:';
          ls -la node_modules/@levicape/fourtwo || true;
          cat node_modules/@levicape/fourtwo/package.json || true;
          source .pulumi-helper.sh;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-application" ]; then
          															echo "Stack paloma-application matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-application,"; then
          															echo "Stack paloma-application found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-application not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack "Deploy" "paloma-application.{{{ vars.CI_ENVIRONMENT }}}" "$(pwd)/iac/stacks/src/application" "paloma-application" "_pulumi/application";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-application" ]; then
          															echo "Stack paloma-application matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-application,"; then
          															echo "Stack paloma-application found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-application not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && setup_stack "paloma-application.{{{ vars.CI_ENVIRONMENT }}}" "$(pwd)/iac/stacks/src/application";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-application" ]; then
          															echo "Stack paloma-application matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-application,"; then
          															echo "Stack paloma-application found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-application not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack_settings "$(pwd)/iac/stacks/src/application" 'aws:skipMetadataApiCheck=false
          context:stack.environment.isProd=false
          context:stack.environment.features=aws
          frontend:stack.dns.hostnames[0]={{{ vars.CI_ENVIRONMENT }}}.paloma.$FRONTEND_HOSTNAME';
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-application" ]; then
          															echo "Stack paloma-application matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-application,"; then
          															echo "Stack paloma-application found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-application not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && refresh_and_preview "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/application" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-application" ]; then
          															echo "Stack paloma-application matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-application,"; then
          															echo "Stack paloma-application found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-application not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && deploy_stack "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/application" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-application" ]; then
          															echo "Stack paloma-application matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-application,"; then
          															echo "Stack paloma-application found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-application not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && capture_outputs "$(pwd)/iac/stacks/src/application" "_pulumi/application";
          echo "Stack paloma-application.{{{ vars.CI_ENVIRONMENT }}} processed";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-codestar" ]; then
          															echo "Stack paloma-codestar matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-codestar,"; then
          															echo "Stack paloma-codestar found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-codestar not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack "Deploy" "paloma-codestar.{{{ vars.CI_ENVIRONMENT }}}" "$(pwd)/iac/stacks/src/codestar" "paloma-codestar" "_pulumi/codestar";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-codestar" ]; then
          															echo "Stack paloma-codestar matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-codestar,"; then
          															echo "Stack paloma-codestar found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-codestar not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && setup_stack "paloma-codestar.{{{ vars.CI_ENVIRONMENT }}}" "$(pwd)/iac/stacks/src/codestar";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-codestar" ]; then
          															echo "Stack paloma-codestar matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-codestar,"; then
          															echo "Stack paloma-codestar found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-codestar not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack_settings "$(pwd)/iac/stacks/src/codestar" 'aws:skipMetadataApiCheck=false
          context:stack.environment.isProd=false
          context:stack.environment.features=aws
          frontend:stack.dns.hostnames[0]={{{ vars.CI_ENVIRONMENT }}}.paloma.$FRONTEND_HOSTNAME';
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-codestar" ]; then
          															echo "Stack paloma-codestar matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-codestar,"; then
          															echo "Stack paloma-codestar found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-codestar not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && refresh_and_preview "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/codestar" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-codestar" ]; then
          															echo "Stack paloma-codestar matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-codestar,"; then
          															echo "Stack paloma-codestar found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-codestar not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && deploy_stack "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/codestar" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-codestar" ]; then
          															echo "Stack paloma-codestar matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-codestar,"; then
          															echo "Stack paloma-codestar found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-codestar not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && capture_outputs "$(pwd)/iac/stacks/src/codestar" "_pulumi/codestar";
          echo "Stack paloma-codestar.{{{ vars.CI_ENVIRONMENT }}} processed";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-datalayer" ]; then
          															echo "Stack paloma-datalayer matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-datalayer,"; then
          															echo "Stack paloma-datalayer found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-datalayer not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack "Deploy" "paloma-datalayer.{{{ vars.CI_ENVIRONMENT }}}" "$(pwd)/iac/stacks/src/datalayer" "paloma-datalayer" "_pulumi/datalayer";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-datalayer" ]; then
          															echo "Stack paloma-datalayer matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-datalayer,"; then
          															echo "Stack paloma-datalayer found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-datalayer not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && setup_stack "paloma-datalayer.{{{ vars.CI_ENVIRONMENT }}}" "$(pwd)/iac/stacks/src/datalayer";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-datalayer" ]; then
          															echo "Stack paloma-datalayer matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-datalayer,"; then
          															echo "Stack paloma-datalayer found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-datalayer not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack_settings "$(pwd)/iac/stacks/src/datalayer" 'aws:skipMetadataApiCheck=false
          context:stack.environment.isProd=false
          context:stack.environment.features=aws
          frontend:stack.dns.hostnames[0]={{{ vars.CI_ENVIRONMENT }}}.paloma.$FRONTEND_HOSTNAME';
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-datalayer" ]; then
          															echo "Stack paloma-datalayer matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-datalayer,"; then
          															echo "Stack paloma-datalayer found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-datalayer not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && refresh_and_preview "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/datalayer" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-datalayer" ]; then
          															echo "Stack paloma-datalayer matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-datalayer,"; then
          															echo "Stack paloma-datalayer found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-datalayer not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && deploy_stack "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/datalayer" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-datalayer" ]; then
          															echo "Stack paloma-datalayer matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-datalayer,"; then
          															echo "Stack paloma-datalayer found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-datalayer not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && capture_outputs "$(pwd)/iac/stacks/src/datalayer" "_pulumi/datalayer";
          echo "Stack paloma-datalayer.{{{ vars.CI_ENVIRONMENT }}} processed";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-dns-root" ]; then
          															echo "Stack paloma-dns-root matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-dns-root,"; then
          															echo "Stack paloma-dns-root found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-dns-root not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack "Deploy" "paloma-dns-root.{{{ vars.CI_ENVIRONMENT }}}" "$(pwd)/iac/stacks/src/dns/root" "paloma-dns-root" "_pulumi/dns_root";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-dns-root" ]; then
          															echo "Stack paloma-dns-root matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-dns-root,"; then
          															echo "Stack paloma-dns-root found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-dns-root not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && setup_stack "paloma-dns-root.{{{ vars.CI_ENVIRONMENT }}}" "$(pwd)/iac/stacks/src/dns/root";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-dns-root" ]; then
          															echo "Stack paloma-dns-root matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-dns-root,"; then
          															echo "Stack paloma-dns-root found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-dns-root not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack_settings "$(pwd)/iac/stacks/src/dns/root" 'aws:skipMetadataApiCheck=false
          context:stack.environment.isProd=false
          context:stack.environment.features=aws
          frontend:stack.dns.hostnames[0]={{{ vars.CI_ENVIRONMENT }}}.paloma.$FRONTEND_HOSTNAME';
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-dns-root" ]; then
          															echo "Stack paloma-dns-root matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-dns-root,"; then
          															echo "Stack paloma-dns-root found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-dns-root not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && refresh_and_preview "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/dns/root" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-dns-root" ]; then
          															echo "Stack paloma-dns-root matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-dns-root,"; then
          															echo "Stack paloma-dns-root found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-dns-root not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && deploy_stack "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/dns/root" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-dns-root" ]; then
          															echo "Stack paloma-dns-root matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-dns-root,"; then
          															echo "Stack paloma-dns-root found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-dns-root not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && capture_outputs "$(pwd)/iac/stacks/src/dns/root" "_pulumi/dns_root";
          echo "Stack paloma-dns-root.{{{ vars.CI_ENVIRONMENT }}} processed";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-idp-oidc" ]; then
          															echo "Stack paloma-idp-oidc matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-idp-oidc,"; then
          															echo "Stack paloma-idp-oidc found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-idp-oidc not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack "Deploy" "paloma-idp-oidc.{{{ vars.CI_ENVIRONMENT }}}" "$(pwd)/iac/stacks/src/idp/oidc" "paloma-idp-oidc" "_pulumi/idp_oidc";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-idp-oidc" ]; then
          															echo "Stack paloma-idp-oidc matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-idp-oidc,"; then
          															echo "Stack paloma-idp-oidc found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-idp-oidc not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && setup_stack "paloma-idp-oidc.{{{ vars.CI_ENVIRONMENT }}}" "$(pwd)/iac/stacks/src/idp/oidc";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-idp-oidc" ]; then
          															echo "Stack paloma-idp-oidc matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-idp-oidc,"; then
          															echo "Stack paloma-idp-oidc found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-idp-oidc not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack_settings "$(pwd)/iac/stacks/src/idp/oidc" 'aws:skipMetadataApiCheck=false
          context:stack.environment.isProd=false
          context:stack.environment.features=aws
          frontend:stack.dns.hostnames[0]={{{ vars.CI_ENVIRONMENT }}}.paloma.$FRONTEND_HOSTNAME';
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-idp-oidc" ]; then
          															echo "Stack paloma-idp-oidc matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-idp-oidc,"; then
          															echo "Stack paloma-idp-oidc found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-idp-oidc not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && refresh_and_preview "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/idp/oidc" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-idp-oidc" ]; then
          															echo "Stack paloma-idp-oidc matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-idp-oidc,"; then
          															echo "Stack paloma-idp-oidc found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-idp-oidc not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && deploy_stack "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/idp/oidc" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-idp-oidc" ]; then
          															echo "Stack paloma-idp-oidc matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-idp-oidc,"; then
          															echo "Stack paloma-idp-oidc found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-idp-oidc not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && capture_outputs "$(pwd)/iac/stacks/src/idp/oidc" "_pulumi/idp_oidc";
          echo "Stack paloma-idp-oidc.{{{ vars.CI_ENVIRONMENT }}} processed";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-idp-users" ]; then
          															echo "Stack paloma-idp-users matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-idp-users,"; then
          															echo "Stack paloma-idp-users found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-idp-users not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack "Deploy" "paloma-idp-users.{{{ vars.CI_ENVIRONMENT }}}" "$(pwd)/iac/stacks/src/idp/users" "paloma-idp-users" "_pulumi/idp_users";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-idp-users" ]; then
          															echo "Stack paloma-idp-users matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-idp-users,"; then
          															echo "Stack paloma-idp-users found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-idp-users not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && setup_stack "paloma-idp-users.{{{ vars.CI_ENVIRONMENT }}}" "$(pwd)/iac/stacks/src/idp/users";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-idp-users" ]; then
          															echo "Stack paloma-idp-users matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-idp-users,"; then
          															echo "Stack paloma-idp-users found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-idp-users not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack_settings "$(pwd)/iac/stacks/src/idp/users" 'aws:skipMetadataApiCheck=false
          context:stack.environment.isProd=false
          context:stack.environment.features=aws
          frontend:stack.dns.hostnames[0]={{{ vars.CI_ENVIRONMENT }}}.paloma.$FRONTEND_HOSTNAME';
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-idp-users" ]; then
          															echo "Stack paloma-idp-users matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-idp-users,"; then
          															echo "Stack paloma-idp-users found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-idp-users not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && refresh_and_preview "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/idp/users" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-idp-users" ]; then
          															echo "Stack paloma-idp-users matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-idp-users,"; then
          															echo "Stack paloma-idp-users found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-idp-users not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && deploy_stack "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/idp/users" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-idp-users" ]; then
          															echo "Stack paloma-idp-users matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-idp-users,"; then
          															echo "Stack paloma-idp-users found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-idp-users not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && capture_outputs "$(pwd)/iac/stacks/src/idp/users" "_pulumi/idp_users";
          echo "Stack paloma-idp-users.{{{ vars.CI_ENVIRONMENT }}} processed";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-nevada-channels" ]; then
          															echo "Stack paloma-nevada-channels matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-nevada-channels,"; then
          															echo "Stack paloma-nevada-channels found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-nevada-channels not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack "Deploy" "paloma-nevada-channels.{{{ vars.CI_ENVIRONMENT }}}" "$(pwd)/iac/stacks/src/levicape/nevada/channels" "paloma-nevada-channels" "_pulumi/levicape_nevada_channels";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-nevada-channels" ]; then
          															echo "Stack paloma-nevada-channels matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-nevada-channels,"; then
          															echo "Stack paloma-nevada-channels found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-nevada-channels not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && setup_stack "paloma-nevada-channels.{{{ vars.CI_ENVIRONMENT }}}" "$(pwd)/iac/stacks/src/levicape/nevada/channels";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-nevada-channels" ]; then
          															echo "Stack paloma-nevada-channels matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-nevada-channels,"; then
          															echo "Stack paloma-nevada-channels found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-nevada-channels not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack_settings "$(pwd)/iac/stacks/src/levicape/nevada/channels" 'aws:skipMetadataApiCheck=false
          context:stack.environment.isProd=false
          context:stack.environment.features=aws
          frontend:stack.dns.hostnames[0]={{{ vars.CI_ENVIRONMENT }}}.paloma.$FRONTEND_HOSTNAME';
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-nevada-channels" ]; then
          															echo "Stack paloma-nevada-channels matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-nevada-channels,"; then
          															echo "Stack paloma-nevada-channels found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-nevada-channels not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && refresh_and_preview "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/levicape/nevada/channels" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-nevada-channels" ]; then
          															echo "Stack paloma-nevada-channels matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-nevada-channels,"; then
          															echo "Stack paloma-nevada-channels found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-nevada-channels not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && deploy_stack "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/levicape/nevada/channels" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-nevada-channels" ]; then
          															echo "Stack paloma-nevada-channels matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-nevada-channels,"; then
          															echo "Stack paloma-nevada-channels found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-nevada-channels not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && capture_outputs "$(pwd)/iac/stacks/src/levicape/nevada/channels" "_pulumi/levicape_nevada_channels";
          echo "Stack paloma-nevada-channels.{{{ vars.CI_ENVIRONMENT }}} processed";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-nevada-client" ]; then
          															echo "Stack paloma-nevada-client matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-nevada-client,"; then
          															echo "Stack paloma-nevada-client found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-nevada-client not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack "Deploy" "paloma-nevada-client.{{{ vars.CI_ENVIRONMENT }}}" "$(pwd)/iac/stacks/src/levicape/nevada/client" "paloma-nevada-client" "_pulumi/levicape_nevada_client";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-nevada-client" ]; then
          															echo "Stack paloma-nevada-client matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-nevada-client,"; then
          															echo "Stack paloma-nevada-client found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-nevada-client not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && setup_stack "paloma-nevada-client.{{{ vars.CI_ENVIRONMENT }}}" "$(pwd)/iac/stacks/src/levicape/nevada/client";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-nevada-client" ]; then
          															echo "Stack paloma-nevada-client matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-nevada-client,"; then
          															echo "Stack paloma-nevada-client found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-nevada-client not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack_settings "$(pwd)/iac/stacks/src/levicape/nevada/client" 'aws:skipMetadataApiCheck=false
          context:stack.environment.isProd=false
          context:stack.environment.features=aws
          frontend:stack.dns.hostnames[0]={{{ vars.CI_ENVIRONMENT }}}.paloma.$FRONTEND_HOSTNAME';
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-nevada-client" ]; then
          															echo "Stack paloma-nevada-client matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-nevada-client,"; then
          															echo "Stack paloma-nevada-client found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-nevada-client not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && refresh_and_preview "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/levicape/nevada/client" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-nevada-client" ]; then
          															echo "Stack paloma-nevada-client matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-nevada-client,"; then
          															echo "Stack paloma-nevada-client found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-nevada-client not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && deploy_stack "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/levicape/nevada/client" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-nevada-client" ]; then
          															echo "Stack paloma-nevada-client matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-nevada-client,"; then
          															echo "Stack paloma-nevada-client found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-nevada-client not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && capture_outputs "$(pwd)/iac/stacks/src/levicape/nevada/client" "_pulumi/levicape_nevada_client";
          echo "Stack paloma-nevada-client.{{{ vars.CI_ENVIRONMENT }}} processed";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-monitor" ]; then
          															echo "Stack paloma-monitor matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-monitor,"; then
          															echo "Stack paloma-monitor found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-monitor not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack "Deploy" "paloma-monitor.{{{ vars.CI_ENVIRONMENT }}}" "$(pwd)/iac/stacks/src/monitor" "paloma-monitor" "_pulumi/monitor";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-monitor" ]; then
          															echo "Stack paloma-monitor matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-monitor,"; then
          															echo "Stack paloma-monitor found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-monitor not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && setup_stack "paloma-monitor.{{{ vars.CI_ENVIRONMENT }}}" "$(pwd)/iac/stacks/src/monitor";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-monitor" ]; then
          															echo "Stack paloma-monitor matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-monitor,"; then
          															echo "Stack paloma-monitor found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-monitor not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack_settings "$(pwd)/iac/stacks/src/monitor" 'aws:skipMetadataApiCheck=false
          context:stack.environment.isProd=false
          context:stack.environment.features=aws
          frontend:stack.dns.hostnames[0]={{{ vars.CI_ENVIRONMENT }}}.paloma.$FRONTEND_HOSTNAME';
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-monitor" ]; then
          															echo "Stack paloma-monitor matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-monitor,"; then
          															echo "Stack paloma-monitor found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-monitor not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && refresh_and_preview "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/monitor" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-monitor" ]; then
          															echo "Stack paloma-monitor matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-monitor,"; then
          															echo "Stack paloma-monitor found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-monitor not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && deploy_stack "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/monitor" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-monitor" ]; then
          															echo "Stack paloma-monitor matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-monitor,"; then
          															echo "Stack paloma-monitor found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-monitor not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && capture_outputs "$(pwd)/iac/stacks/src/monitor" "_pulumi/monitor";
          echo "Stack paloma-monitor.{{{ vars.CI_ENVIRONMENT }}} processed";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-nevada-http" ]; then
          															echo "Stack paloma-nevada-http matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-nevada-http,"; then
          															echo "Stack paloma-nevada-http found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-nevada-http not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack "Deploy" "paloma-nevada-http.{{{ vars.CI_ENVIRONMENT }}}" "$(pwd)/iac/stacks/src/levicape/nevada/http" "paloma-nevada-http" "_pulumi/levicape_nevada_http";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-nevada-http" ]; then
          															echo "Stack paloma-nevada-http matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-nevada-http,"; then
          															echo "Stack paloma-nevada-http found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-nevada-http not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && setup_stack "paloma-nevada-http.{{{ vars.CI_ENVIRONMENT }}}" "$(pwd)/iac/stacks/src/levicape/nevada/http";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-nevada-http" ]; then
          															echo "Stack paloma-nevada-http matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-nevada-http,"; then
          															echo "Stack paloma-nevada-http found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-nevada-http not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack_settings "$(pwd)/iac/stacks/src/levicape/nevada/http" 'aws:skipMetadataApiCheck=false
          context:stack.environment.isProd=false
          context:stack.environment.features=aws
          frontend:stack.dns.hostnames[0]={{{ vars.CI_ENVIRONMENT }}}.paloma.$FRONTEND_HOSTNAME';
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-nevada-http" ]; then
          															echo "Stack paloma-nevada-http matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-nevada-http,"; then
          															echo "Stack paloma-nevada-http found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-nevada-http not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && refresh_and_preview "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/levicape/nevada/http" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-nevada-http" ]; then
          															echo "Stack paloma-nevada-http matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-nevada-http,"; then
          															echo "Stack paloma-nevada-http found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-nevada-http not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && deploy_stack "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/levicape/nevada/http" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-nevada-http" ]; then
          															echo "Stack paloma-nevada-http matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-nevada-http,"; then
          															echo "Stack paloma-nevada-http found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-nevada-http not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && capture_outputs "$(pwd)/iac/stacks/src/levicape/nevada/http" "_pulumi/levicape_nevada_http";
          echo "Stack paloma-nevada-http.{{{ vars.CI_ENVIRONMENT }}} processed";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-nevada-web" ]; then
          															echo "Stack paloma-nevada-web matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-nevada-web,"; then
          															echo "Stack paloma-nevada-web found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-nevada-web not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack "Deploy" "paloma-nevada-web.{{{ vars.CI_ENVIRONMENT }}}" "$(pwd)/iac/stacks/src/levicape/nevada/web" "paloma-nevada-web" "_pulumi/levicape_nevada_web";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-nevada-web" ]; then
          															echo "Stack paloma-nevada-web matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-nevada-web,"; then
          															echo "Stack paloma-nevada-web found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-nevada-web not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && setup_stack "paloma-nevada-web.{{{ vars.CI_ENVIRONMENT }}}" "$(pwd)/iac/stacks/src/levicape/nevada/web";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-nevada-web" ]; then
          															echo "Stack paloma-nevada-web matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-nevada-web,"; then
          															echo "Stack paloma-nevada-web found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-nevada-web not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack_settings "$(pwd)/iac/stacks/src/levicape/nevada/web" 'aws:skipMetadataApiCheck=false
          context:stack.environment.isProd=false
          context:stack.environment.features=aws
          frontend:stack.dns.hostnames[0]={{{ vars.CI_ENVIRONMENT }}}.paloma.$FRONTEND_HOSTNAME';
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-nevada-web" ]; then
          															echo "Stack paloma-nevada-web matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-nevada-web,"; then
          															echo "Stack paloma-nevada-web found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-nevada-web not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && refresh_and_preview "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/levicape/nevada/web" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-nevada-web" ]; then
          															echo "Stack paloma-nevada-web matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-nevada-web,"; then
          															echo "Stack paloma-nevada-web found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-nevada-web not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && deploy_stack "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/levicape/nevada/web" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-nevada-web" ]; then
          															echo "Stack paloma-nevada-web matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-nevada-web,"; then
          															echo "Stack paloma-nevada-web found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-nevada-web not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && capture_outputs "$(pwd)/iac/stacks/src/levicape/nevada/web" "_pulumi/levicape_nevada_web";
          echo "Stack paloma-nevada-web.{{{ vars.CI_ENVIRONMENT }}} processed";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-nevada-monitor" ]; then
          															echo "Stack paloma-nevada-monitor matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-nevada-monitor,"; then
          															echo "Stack paloma-nevada-monitor found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-nevada-monitor not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack "Deploy" "paloma-nevada-monitor.{{{ vars.CI_ENVIRONMENT }}}" "$(pwd)/iac/stacks/src/levicape/nevada/monitor" "paloma-nevada-monitor" "_pulumi/levicape_nevada_monitor";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-nevada-monitor" ]; then
          															echo "Stack paloma-nevada-monitor matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-nevada-monitor,"; then
          															echo "Stack paloma-nevada-monitor found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-nevada-monitor not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && setup_stack "paloma-nevada-monitor.{{{ vars.CI_ENVIRONMENT }}}" "$(pwd)/iac/stacks/src/levicape/nevada/monitor";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-nevada-monitor" ]; then
          															echo "Stack paloma-nevada-monitor matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-nevada-monitor,"; then
          															echo "Stack paloma-nevada-monitor found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-nevada-monitor not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack_settings "$(pwd)/iac/stacks/src/levicape/nevada/monitor" 'aws:skipMetadataApiCheck=false
          context:stack.environment.isProd=false
          context:stack.environment.features=aws
          frontend:stack.dns.hostnames[0]={{{ vars.CI_ENVIRONMENT }}}.paloma.$FRONTEND_HOSTNAME';
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-nevada-monitor" ]; then
          															echo "Stack paloma-nevada-monitor matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-nevada-monitor,"; then
          															echo "Stack paloma-nevada-monitor found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-nevada-monitor not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && refresh_and_preview "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/levicape/nevada/monitor" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-nevada-monitor" ]; then
          															echo "Stack paloma-nevada-monitor matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-nevada-monitor,"; then
          															echo "Stack paloma-nevada-monitor found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-nevada-monitor not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && deploy_stack "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/levicape/nevada/monitor" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-nevada-monitor" ]; then
          															echo "Stack paloma-nevada-monitor matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-nevada-monitor,"; then
          															echo "Stack paloma-nevada-monitor found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-nevada-monitor not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && capture_outputs "$(pwd)/iac/stacks/src/levicape/nevada/monitor" "_pulumi/levicape_nevada_monitor";
          echo "Stack paloma-nevada-monitor.{{{ vars.CI_ENVIRONMENT }}} processed";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-nevada-wwwroot" ]; then
          															echo "Stack paloma-nevada-wwwroot matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-nevada-wwwroot,"; then
          															echo "Stack paloma-nevada-wwwroot found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-nevada-wwwroot not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack "Deploy" "paloma-nevada-wwwroot.{{{ vars.CI_ENVIRONMENT }}}" "$(pwd)/iac/stacks/src/levicape/nevada/wwwroot" "paloma-nevada-wwwroot" "_pulumi/levicape_nevada_wwwroot";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-nevada-wwwroot" ]; then
          															echo "Stack paloma-nevada-wwwroot matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-nevada-wwwroot,"; then
          															echo "Stack paloma-nevada-wwwroot found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-nevada-wwwroot not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && setup_stack "paloma-nevada-wwwroot.{{{ vars.CI_ENVIRONMENT }}}" "$(pwd)/iac/stacks/src/levicape/nevada/wwwroot";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-nevada-wwwroot" ]; then
          															echo "Stack paloma-nevada-wwwroot matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-nevada-wwwroot,"; then
          															echo "Stack paloma-nevada-wwwroot found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-nevada-wwwroot not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack_settings "$(pwd)/iac/stacks/src/levicape/nevada/wwwroot" 'aws:skipMetadataApiCheck=false
          context:stack.environment.isProd=false
          context:stack.environment.features=aws
          frontend:stack.dns.hostnames[0]={{{ vars.CI_ENVIRONMENT }}}.paloma.$FRONTEND_HOSTNAME';
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-nevada-wwwroot" ]; then
          															echo "Stack paloma-nevada-wwwroot matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-nevada-wwwroot,"; then
          															echo "Stack paloma-nevada-wwwroot found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-nevada-wwwroot not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && refresh_and_preview "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/levicape/nevada/wwwroot" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-nevada-wwwroot" ]; then
          															echo "Stack paloma-nevada-wwwroot matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-nevada-wwwroot,"; then
          															echo "Stack paloma-nevada-wwwroot found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-nevada-wwwroot not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && deploy_stack "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/levicape/nevada/wwwroot" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "paloma-nevada-wwwroot" ]; then
          															echo "Stack paloma-nevada-wwwroot matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",paloma-nevada-wwwroot,"; then
          															echo "Stack paloma-nevada-wwwroot found in comma-separated list"
          															true
          														else
          															echo "Stack paloma-nevada-wwwroot not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "No stack filter specified, processing all stacks"
          														true
          													fi && capture_outputs "$(pwd)/iac/stacks/src/levicape/nevada/wwwroot" "_pulumi/levicape_nevada_wwwroot";
          echo "Stack paloma-nevada-wwwroot.{{{ vars.CI_ENVIRONMENT }}} processed";
      - name: Tag and push image with git-${{ github.sha }}
        run: |-
          if [[ -z "$PULUMI_STACK_FILTER" || "$PULUMI_STACK_FILTER" == "*" || "$PULUMI_STACK_FILTER" =~ "codestar" ]]; then
          																echo "Codestar output found, deploying image"
          																true
          															else
          																echo "Please verify PULUMI_STACK_FILTER: $PULUMI_STACK_FILTER 
           This should include codestar for the image push mechanism"
          																exit 0
          															fi;
          ls -la _pulumi || true;
          [ -f _pulumi/application.sh ] && cat _pulumi/application.sh;
          [ -f _pulumi/application.sh ] && source _pulumi/application.sh;
          [ -f _pulumi/codestar.sh ] && cat _pulumi/codestar.sh;
          [ -f _pulumi/codestar.sh ] && source _pulumi/codestar.sh;
          [ -f _pulumi/datalayer.sh ] && cat _pulumi/datalayer.sh;
          [ -f _pulumi/datalayer.sh ] && source _pulumi/datalayer.sh;
          [ -f _pulumi/dns_root.sh ] && cat _pulumi/dns_root.sh;
          [ -f _pulumi/dns_root.sh ] && source _pulumi/dns_root.sh;
          [ -f _pulumi/idp_oidc.sh ] && cat _pulumi/idp_oidc.sh;
          [ -f _pulumi/idp_oidc.sh ] && source _pulumi/idp_oidc.sh;
          [ -f _pulumi/idp_users.sh ] && cat _pulumi/idp_users.sh;
          [ -f _pulumi/idp_users.sh ] && source _pulumi/idp_users.sh;
          [ -f _pulumi/levicape_nevada_channels.sh ] && cat _pulumi/levicape_nevada_channels.sh;
          [ -f _pulumi/levicape_nevada_channels.sh ] && source _pulumi/levicape_nevada_channels.sh;
          [ -f _pulumi/levicape_nevada_client.sh ] && cat _pulumi/levicape_nevada_client.sh;
          [ -f _pulumi/levicape_nevada_client.sh ] && source _pulumi/levicape_nevada_client.sh;
          [ -f _pulumi/monitor.sh ] && cat _pulumi/monitor.sh;
          [ -f _pulumi/monitor.sh ] && source _pulumi/monitor.sh;
          [ -f _pulumi/levicape_nevada_http.sh ] && cat _pulumi/levicape_nevada_http.sh;
          [ -f _pulumi/levicape_nevada_http.sh ] && source _pulumi/levicape_nevada_http.sh;
          [ -f _pulumi/levicape_nevada_web.sh ] && cat _pulumi/levicape_nevada_web.sh;
          [ -f _pulumi/levicape_nevada_web.sh ] && source _pulumi/levicape_nevada_web.sh;
          [ -f _pulumi/levicape_nevada_monitor.sh ] && cat _pulumi/levicape_nevada_monitor.sh;
          [ -f _pulumi/levicape_nevada_monitor.sh ] && source _pulumi/levicape_nevada_monitor.sh;
          [ -f _pulumi/levicape_nevada_wwwroot.sh ] && cat _pulumi/levicape_nevada_wwwroot.sh;
          [ -f _pulumi/levicape_nevada_wwwroot.sh ] && source _pulumi/levicape_nevada_wwwroot.sh;
          echo "Verify imported environment variables";
          echo "Codestar output paloma_codestar_ecr: $paloma_codestar_ecr";
          export ECR_URL=$(echo  $paloma_codestar_ecr | jq -r .repository.url);
          echo "ECR_URL: $ECR_URL";
          aws sts get-caller-identity --output json;
          sleep 2s;
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_URL;
          echo "Tagging $ECR_URL:git-${{ github.sha }}";
          docker tag ${{ env.APPLICATION_IMAGE_NAME }}:latest $ECR_URL:git-${{ github.sha }};
          docker push $ECR_URL:git-${{ github.sha }};
      - name: Tag and push image with ${{ env.CI_ENVIRONMENT }}
        run: |-
          if [[ -z "$PULUMI_STACK_FILTER" || "$PULUMI_STACK_FILTER" == "*" || "$PULUMI_STACK_FILTER" =~ "codestar" ]]; then
          																echo "Codestar output found, deploying image"
          																true
          															else
          																echo "Please verify PULUMI_STACK_FILTER: $PULUMI_STACK_FILTER 
           This should include codestar for the image push mechanism"
          																exit 0
          															fi;
          ls -la _pulumi || true;
          [ -f _pulumi/application.sh ] && cat _pulumi/application.sh;
          [ -f _pulumi/application.sh ] && source _pulumi/application.sh;
          [ -f _pulumi/codestar.sh ] && cat _pulumi/codestar.sh;
          [ -f _pulumi/codestar.sh ] && source _pulumi/codestar.sh;
          [ -f _pulumi/datalayer.sh ] && cat _pulumi/datalayer.sh;
          [ -f _pulumi/datalayer.sh ] && source _pulumi/datalayer.sh;
          [ -f _pulumi/dns_root.sh ] && cat _pulumi/dns_root.sh;
          [ -f _pulumi/dns_root.sh ] && source _pulumi/dns_root.sh;
          [ -f _pulumi/idp_oidc.sh ] && cat _pulumi/idp_oidc.sh;
          [ -f _pulumi/idp_oidc.sh ] && source _pulumi/idp_oidc.sh;
          [ -f _pulumi/idp_users.sh ] && cat _pulumi/idp_users.sh;
          [ -f _pulumi/idp_users.sh ] && source _pulumi/idp_users.sh;
          [ -f _pulumi/levicape_nevada_channels.sh ] && cat _pulumi/levicape_nevada_channels.sh;
          [ -f _pulumi/levicape_nevada_channels.sh ] && source _pulumi/levicape_nevada_channels.sh;
          [ -f _pulumi/levicape_nevada_client.sh ] && cat _pulumi/levicape_nevada_client.sh;
          [ -f _pulumi/levicape_nevada_client.sh ] && source _pulumi/levicape_nevada_client.sh;
          [ -f _pulumi/monitor.sh ] && cat _pulumi/monitor.sh;
          [ -f _pulumi/monitor.sh ] && source _pulumi/monitor.sh;
          [ -f _pulumi/levicape_nevada_http.sh ] && cat _pulumi/levicape_nevada_http.sh;
          [ -f _pulumi/levicape_nevada_http.sh ] && source _pulumi/levicape_nevada_http.sh;
          [ -f _pulumi/levicape_nevada_web.sh ] && cat _pulumi/levicape_nevada_web.sh;
          [ -f _pulumi/levicape_nevada_web.sh ] && source _pulumi/levicape_nevada_web.sh;
          [ -f _pulumi/levicape_nevada_monitor.sh ] && cat _pulumi/levicape_nevada_monitor.sh;
          [ -f _pulumi/levicape_nevada_monitor.sh ] && source _pulumi/levicape_nevada_monitor.sh;
          [ -f _pulumi/levicape_nevada_wwwroot.sh ] && cat _pulumi/levicape_nevada_wwwroot.sh;
          [ -f _pulumi/levicape_nevada_wwwroot.sh ] && source _pulumi/levicape_nevada_wwwroot.sh;
          echo "Verify imported environment variables";
          echo "Codestar output paloma_codestar_ecr: $paloma_codestar_ecr";
          export ECR_URL=$(echo  $paloma_codestar_ecr | jq -r .repository.url);
          echo "ECR_URL: $ECR_URL";
          aws sts get-caller-identity --output json;
          sleep 2s;
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_URL;
          echo "Tagging $ECR_URL:${{ env.CI_ENVIRONMENT }}";
          docker tag ${{ env.APPLICATION_IMAGE_NAME }}:latest $ECR_URL:${{ env.CI_ENVIRONMENT }};
          docker push $ECR_URL:${{ env.CI_ENVIRONMENT }};
      - name: Cleanup
        run: |-
          rm -f .pulumi-ci .export-cd .pulumi-helper.sh .ci-env;
          rm -rf _pulumi;

########################################
########################################
#**:_$~- {"$$":"head","filename":"[wd][dispatch] - CD - [Dispatch: Preview, Deploy, Push].yml","source":"iac/workflows/github/workflow_dispatch/CD.js"}
#**:_$~- {"$$":"script","generator":"codegen/github/GenerateGithubWorkflow.mjs"}
#**:_$~- {"$$":"body","hashed":"271ab2a8cc38e5592023f53edd81e4d704b3e736d2ae9b46799bd683b0c50761"}
#**:_$~- {"$$":"footer","started":"2025-03-30T20:52:27.971Z","now":"2025-03-30T20:52:27.979Z","elapsed":"8ms"}
# END OF GENERATED FILE

